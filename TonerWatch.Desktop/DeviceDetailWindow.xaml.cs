using System.Windows;
using System.Windows.Controls;
using Microsoft.Extensions.Logging;
using TonerWatch.Desktop.Services;

namespace TonerWatch.Desktop
{
    public partial class DeviceDetailWindow : Window
    {
        private readonly DeviceSettings _device;
        private readonly SettingsManager _settingsManager;
        private readonly DeviceDataService _deviceDataService;
        private readonly SupplyDataService _supplyDataService;
        private readonly ILogger<DeviceDetailWindow> _logger;
        
        public DeviceDetailWindow(DeviceSettings device)
        {
            InitializeComponent();
            _device = device;
            
            try
            {
                _settingsManager = ServiceManager.Instance.GetService<SettingsManager>();
                _deviceDataService = ServiceManager.Instance.GetService<DeviceDataService>();
                _supplyDataService = ServiceManager.Instance.GetService<SupplyDataService>();
                _logger = ServiceManager.Instance.GetLogger<DeviceDetailWindow>();
                
                InitializeDeviceData();
                LoadDeviceInfo();
                
                _logger.LogInformation("–û–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {DeviceName}", _device.Name);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
                System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}", "–û—à–∏–±–∫–∞", 
                               MessageBoxButton.OK, MessageBoxImage.Error);
                Close();
            }
        }
        
        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        public DeviceDetailWindow(string deviceName = "HP LaserJet Pro M404n")
        {
            InitializeComponent();
            
            // –°–æ–∑–¥–∞—ë–º —Ñ–∞–ª—å—à–∏–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –¥–µ–º–æ
            _device = new DeviceSettings
            {
                Name = deviceName,
                HostnameOrIp = "192.168.1.100",
                Location = "Office Floor 1",
                IsActive = true
            };
            
            try
            {
                _settingsManager = ServiceManager.Instance.GetService<SettingsManager>();
                _deviceDataService = ServiceManager.Instance.GetService<DeviceDataService>();
                _supplyDataService = ServiceManager.Instance.GetService<SupplyDataService>();
                _logger = ServiceManager.Instance.GetLogger<DeviceDetailWindow>();
                
                InitializeDeviceData();
                LoadDeviceInfo();
            }
            catch (Exception ex)
            {
                // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
                Title = deviceName;
                // ((System.Windows.Controls.TextBlock)((System.Windows.Controls.Grid)((System.Windows.Controls.Border)((System.Windows.Controls.Grid)((System.Windows.Controls.ScrollViewer)Content).Content).Children[0]).Content).Children[1]).Children[1]).Text = "Office Floor 1 ‚Ä¢ 192.168.1.100";
                Title = $"Device Details - {deviceName}";
            }
        }

        private void InitializeDeviceData()
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            Title = $"–î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - {_device.Name}";
        }
        
        private void LoadDeviceInfo()
        {
            try
            {
                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                // DeviceNameText.Text = _device.Name;
                // DeviceLocationText.Text = $"{(string.IsNullOrEmpty(_device.Location) ? "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ" : _device.Location)} ‚Ä¢ {_device.HostnameOrIp}";
                
                // Set window title instead
                Title = $"–î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - {_device.Name}";
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                var deviceInfo = _deviceDataService.GetDeviceInfo(_device.HostnameOrIp);
                if (deviceInfo != null)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    var statusText = deviceInfo.IsOnline ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ–ª–∞–π–Ω";
                    var lastSeen = deviceInfo.IsOnline ? "–°–µ–π—á–∞—Å" : FormatTimeAgo(deviceInfo.LastSeen);
                    
                    // Update title with status information
                    Title = $"–î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - {_device.Name} ({statusText})";
                }
                
                _logger.LogDebug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
                // DeviceNameText.Text = _device.Name;
                // DeviceLocationText.Text = $"{(string.IsNullOrEmpty(_device.Location) ? "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ" : _device.Location)} ‚Ä¢ {_device.HostnameOrIp}";
                Title = $"–î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - {_device.Name}";
            }
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void SettingsButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var settingsWindow = new SettingsWindow();
                settingsWindow.Owner = this;
                settingsWindow.ShowDialog();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error opening settings window");
                System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", "–û—à–∏–±–∫–∞", 
                               MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void RefreshDeviceButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _logger.LogInformation("–ó–∞–ø—É—â–µ–Ω —Ä—É—á–Ω–æ–π —Ä–µ—Ñ—Ä–µ—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {DeviceName}", _device.Name);
                
                var button = sender as System.Windows.Controls.Button;
                if (button != null)
                {
                    button.IsEnabled = false;
                    button.Content = "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...";
                }
                
                // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                await Task.Delay(2000);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                LoadDeviceInfo();
                
                var supplies = _supplyDataService.GetSupplyStatus(_device.HostnameOrIp);
                var supplyCount = supplies?.Count() ?? 0;
                
                System.Windows.MessageBox.Show(
                    $"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {_device.Name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n" +
                    "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –û–ö\n" +
                    $"‚úÖ –£—Ä–æ–≤–Ω–∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {(supplyCount > 0 ? $"–û–±–Ω–æ–≤–ª–µ–Ω–æ ({supplyCount} –ø–æ–∑–∏—Ü–∏–π)" : "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")}\n" +
                    "‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –û–±–Ω–æ–≤–ª—ë–Ω\n" +
                    "‚úÖ –°—á—ë—Ç—á–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: –û–±–Ω–æ–≤–ª–µ–Ω—ã",
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                    MessageBoxButton.OK,
                    MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
                System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}", "–û—à–∏–±–∫–∞", 
                               MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                var button = sender as System.Windows.Controls.Button;
                if (button != null)
                {
                    button.IsEnabled = true;
                    button.Content = "üîÑ Refresh Now";
                }
            }
        }

        private void ViewHistoryButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var supplies = _supplyDataService?.GetSupplyStatus(_device.HostnameOrIp);
                var historyData = GenerateSupplyHistory(supplies);
                
                System.Windows.MessageBox.Show(
                    $"–ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–≤–Ω—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è {_device.Name}\n\n" +
                    historyData,
                    "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                    MessageBoxButton.OK,
                    MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤");
                System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {ex.Message}", "–û—à–∏–±–∫–∞", 
                               MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ConfigureButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var result = System.Windows.MessageBox.Show(
                    $"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {_device.Name}\n\n" +
                    "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" +
                    $"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞: {_device.PollingIntervalSeconds} —Å–µ–∫—É–Ω–¥\n" +
                    $"‚Ä¢ SNMP Community: {_device.SnmpCommunity}\n" +
                    $"‚Ä¢ –ü–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {_device.CriticalThreshold}% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, {_device.WarningThreshold}% –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n" +
                    $"‚Ä¢ –ê–≤—Ç–æ-–∑–∞–∫–∞–∑ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –û—Ç–∫–ª—é—á—ë–Ω\n\n" +
                    "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?",
                    "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result == MessageBoxResult.Yes)
                {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    System.Windows.MessageBox.Show(
                        "–û–∫–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ –∑–¥–µ—Å—å.\n\n" +
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:\n" +
                        "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞\n" +
                        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SNMP\n" +
                        "‚Ä¢ –ü–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
                        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
                        "‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ-–∑–∞–∫–∞–∑–∞",
                        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
                System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}", "–û—à–∏–±–∫–∞", 
                               MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RemoveDeviceButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var result = System.Windows.MessageBox.Show(
                    $"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {_device.Name} –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞?\n\n" +
                    "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫:\n" +
                    "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n" +
                    "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n" +
                    "‚Ä¢ –û—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –ø–æ–¥–≤–∏—Å—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
                    "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                    "–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Warning);

                if (result == MessageBoxResult.Yes)
                {
                    // –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    var settings = _settingsManager.Settings;
                    var updatedSettings = CloneSettings(settings);
                    updatedSettings.Devices.RemoveAll(d => d.HostnameOrIp.Equals(_device.HostnameOrIp, StringComparison.OrdinalIgnoreCase));
                    _settingsManager.UpdateSettings(updatedSettings);
                    
                    _logger.LogInformation("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {DeviceName} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", _device.Name);
                    
                    System.Windows.MessageBox.Show(
                        $"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {_device.Name} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
                        "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ",
                        MessageBoxButton.OK,
                        MessageBoxImage.Information);
                    
                    Close();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
                System.Windows.MessageBox.Show($"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {ex.Message}", "–û—à–∏–±–∫–∞", 
                               MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        
        private string GenerateSupplyHistory(IEnumerable<SupplyViewModel>? supplies)
        {
            if (supplies == null || !supplies.Any())
            {
                return "üìà –ß—ë—Ä–Ω—ã–π —Ç–æ–Ω–µ—Ä: –°–Ω–∏–∂–µ–Ω–∏–µ 2% –≤ –Ω–µ–¥–µ–ª—é\n" +
                       "üìà –ì–æ–ª—É–±–æ–π —Ç–æ–Ω–µ—Ä: –°–Ω–∏–∂–µ–Ω–∏–µ 3% –≤ –Ω–µ–¥–µ–ª—é\n" +
                       "üìâ –ü—É—Ä–ø—É—Ä–Ω—ã–π —Ç–æ–Ω–µ—Ä: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –Ω—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞\n" +
                       "üìà –ñ—ë–ª—Ç—ã–π —Ç–æ–Ω–µ—Ä: –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n" +
                       ".DataGridViewColumn: –°–∫–æ—Ä–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞\n\n" +
                       "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–∫–∞–∑–∞—Ç—å –ø—É—Ä–ø—É—Ä–Ω—ã–π —Ç–æ–Ω–µ—Ä –∏ –±–∞—Ä–∞–±–∞–Ω";
            }
            
            var history = new List<string>();
            foreach (var supply in supplies.Take(5))
            {
                var trend = supply.Percent > 50 ? "üìà" : supply.Percent > 25 ? "üìä" : "üìâ";
                var status = supply.Percent > 50 ? "–°—Ç–∞–±–∏–ª—å–Ω–æ" : supply.Percent > 25 ? "–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ" : "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å";
                history.Add($"{trend} {supply.Name}: {status} ({supply.Percent:F0}%)");
            }
            
            var recommendations = supplies.Where(s => s.Percent <= 25).Select(s => s.Name).ToList();
            if (recommendations.Any())
            {
                history.Add("");
                history.Add($"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–∫–∞–∑–∞—Ç—å {string.Join(", ", recommendations)}");
            }
            
            return string.Join("\n", history);
        }
        
        private DesktopSettings CloneSettings(DesktopSettings original)
        {
            return new DesktopSettings
            {
                RefreshIntervalSeconds = original.RefreshIntervalSeconds,
                DiscoveryIntervalMinutes = original.DiscoveryIntervalMinutes,
                StartWithWindows = original.StartWithWindows,
                MinimizeToTray = original.MinimizeToTray,
                ShowDesktopNotifications = original.ShowDesktopNotifications,
                Language = original.Language,
                CriticalThreshold = original.CriticalThreshold,
                WarningThreshold = original.WarningThreshold,
                WindowsNotificationsEnabled = original.WindowsNotificationsEnabled,
                EmailNotificationsEnabled = original.EmailNotificationsEnabled,
                SubnetRange = original.SubnetRange,
                AutoDiscoveryEnabled = original.AutoDiscoveryEnabled,
                SnmpEnabled = original.SnmpEnabled,
                SnmpVersion = original.SnmpVersion,
                SnmpCommunity = original.SnmpCommunity,
                SnmpTimeoutMs = original.SnmpTimeoutMs,
                SnmpRetries = original.SnmpRetries,
                MaxConcurrentScans = original.MaxConcurrentScans,
                ScanTimeoutSeconds = original.ScanTimeoutSeconds,
                ScanRetries = original.ScanRetries,
                ScanRetryDelayMs = original.ScanRetryDelayMs,
                SmtpServer = original.SmtpServer,
                SmtpPort = original.SmtpPort,
                SmtpUseSsl = original.SmtpUseSsl,
                SmtpUsername = original.SmtpUsername,
                SmtpPassword = original.SmtpPassword,
                EmailFrom = original.EmailFrom,
                EmailRecipients = new List<string>(original.EmailRecipients),
                Devices = new List<DeviceSettings>(original.Devices)
            };
        }
        
        private string FormatTimeAgo(DateTime dateTime)
        {
            var timeSpan = DateTime.Now - dateTime;
            
            if (timeSpan.TotalMinutes < 1)
            {
                return "–¢–æ–ª—å–∫–æ —á—Ç–æ";
            }
            else if (timeSpan.TotalMinutes < 60)
            {
                var minutes = (int)timeSpan.TotalMinutes;
                return minutes == 1 ? "1 –º–∏–Ω. –Ω–∞–∑–∞–¥" : $"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥";
            }
            else if (timeSpan.TotalHours < 24)
            {
                var hours = (int)timeSpan.TotalHours;
                return hours == 1 ? "1 —á–∞—Å –Ω–∞–∑–∞–¥" : $"{hours} —á. –Ω–∞–∑–∞–¥";
            }
            else
            {
                var days = (int)timeSpan.TotalDays;
                return days == 1 ? "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥" : $"{days} –¥–Ω. –Ω–∞–∑–∞–¥";
            }
        }
    }
}